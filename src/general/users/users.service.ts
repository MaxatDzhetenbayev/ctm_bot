import {
  BadRequestException,
  ConflictException,
  ForbiddenException,
  HttpException,
  Injectable,
  InternalServerErrorException,
  Logger,
  NotFoundException
} from '@nestjs/common'
import { InjectModel } from '@nestjs/sequelize'
import { FindOptions, Op } from 'sequelize'
import { Sequelize, SequelizeOptions } from 'sequelize-typescript'
import { Center } from '../centers/entities/center.entity'
import { CreateUserDto } from './dto/create-user.dto'
import { ManagerTable } from './entities/manager-table.entity'
import { Profile } from './entities/profile.entity'
import { Role, RoleType } from './entities/role.entity'
import { AuthType, User } from './entities/user.entity'

@Injectable()
export class UsersService {
  constructor(
    @InjectModel(User)
    private readonly usersRepository: typeof User,
    @InjectModel(Profile)
    private readonly profilesRepository: typeof Profile,
    @InjectModel(Role)
    private readonly rolesRepository: typeof Role,
    @InjectModel(ManagerTable)
    private readonly managerTableRepository: typeof ManagerTable,
    private readonly sequelize: Sequelize
  ) {}

  private readonly logger = new Logger(this.usersRepository.name)

  async getManager(managerId: number) {
    try {
      const manager = await this.usersRepository.findOne({
        where: {
          id: managerId
        },
        include: [
          {
            model: Role,
            where: { name: 'manager' },
            attributes: ['name']
          },
          {
            model: Profile,
            attributes: ['full_name', 'iin', 'phone']
          }
        ]
      })

      if (!manager) {
        throw new NotFoundException('–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      if (manager.role.name !== 'manager') {
        throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
      }

      return manager
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }

      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
    }
  }

  async getProfileUser({ login }: { login: string }) {
    try {
      const user = await this.validateUserByLogin(login)
      if (!user) {
        throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const profile = await this.profilesRepository.findOne({
        where: {
          id: user.id
        }
      })

      if (!profile) {
        throw new NotFoundException('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const { login: userLogin, role } = user
      const { full_name } = profile

      return {
        userLogin,
        role: role.name,
        full_name
      }
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }

      throw new InternalServerErrorException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      )
    }
  }

  async validateUserByLogin(login: string) {
    const user = await this.usersRepository.findOne({
      where: {
        login: login
      },
      include: [
        {
          model: Role,
          attributes: ['name']
        },
        {
          model: Center,
          through: { attributes: [] }
        }
      ],
      plain: true
    })

    return user
  }

  async validateUserByTelegram(telegram_id: string) {
    this.logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    const user = await this.usersRepository.findOne({
      where: {
        telegram_id
      }
    })

    return user
  }

  async getManagersByCenter(center_id: number) {
    try {
      const managers = await this.managerTableRepository.findAll({
        where: { center_id },
        attributes: ['manager_id']
      })

      if (!managers.length) {
        throw new NotFoundException('–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      }

      const managerIds = managers.map(manager => manager.manager_id)

      const profiles = await this.profilesRepository.findAll({
        where: { id: managerIds },
        attributes: ['id', 'full_name', 'iin', 'phone']
      })

      if (!profiles.length) {
        return []
      }

      return profiles
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤')
    }
  }

  async updateEmployeeById(
    employeeId: number,
    updateData: { full_name?: string; iin?: string; phone?: string },
    user: User
  ) {
    try {
      const userWithCenters = await this.usersRepository.findOne({
        where: { id: user.id },
        include: [{ model: Center, through: { attributes: [] } }]
      })

      if (!userWithCenters || !userWithCenters.centers.length) {
        throw new BadRequestException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞')
      }

      console.log('üìå –¶–µ–Ω—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userWithCenters.centers)

      const centerId = userWithCenters.centers[0].id
      console.log('üìå –†–∞–±–æ—Ç–∞–µ–º —Å —Ü–µ–Ω—Ç—Ä–æ–º:', centerId)

      const profile = await this.profilesRepository.findOne({
        where: { id: employeeId },
        include: [
          {
            model: User,
            include: [
              {
                model: Center,
                through: { attributes: [] },
                where: { id: centerId }
              }
            ]
          }
        ]
      })

      if (!profile) {
        throw new NotFoundException(
          '–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Ü–µ–Ω—Ç—Ä—É'
        )
      }

      console.log('üìå –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫:', profile)

      await profile.update({
        full_name: updateData.full_name ?? profile.full_name,
        iin: updateData.iin ?? profile.iin,
        phone: updateData.phone ?? profile.phone
      })

      console.log('üìå –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', profile)

      return profile
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }
      throw new InternalServerErrorException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ'
      )
    }
  }

  async createUser({
    dto,
    creater_role
  }: {
    dto: CreateUserDto
    auth_type?: AuthType
    creater_role?: RoleType
  }) {
    const ROLE_HIERARCHY = {
      [RoleType.superadmin]: [RoleType.admin],
      [RoleType.admin]: [RoleType.manager, RoleType.user],
      [RoleType.manager]: [RoleType.user],
      [RoleType.user]: []
    }

    const transaction = await this.sequelize.transaction()
    try {
      this.logger.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      const {
        login,
        password,
        profile,
        visitor_type,
        center_id,
        cabinet,
        role,
        service_ids,
        telegram_id,
        table,
        auth_type
      } = dto

      // const createrRole = await this.rolesRepository.findOne({
      //   where: { name: creater_role }
      // })

      // if (!createrRole) {
      //   throw new InternalServerErrorException('–†–æ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      // }

      // const AUTH_RESTRICTIONS = {
      //   [RoleType.manager]: AuthType.offline,
      //   [RoleType.user]: AuthType.telegram
      // }

      // if (
      //   AUTH_RESTRICTIONS[createrRole.name] &&
      //   auth_type !== AUTH_RESTRICTIONS[createrRole.name]
      // ) {
      //   throw new ForbiddenException(
      //     `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∏–ø–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ${auth_type}`
      //   )
      // }

      // if (!ROLE_HIERARCHY[createrRole.name]?.includes(role)) {
      //   throw new ForbiddenException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏')
      // }

      const userFindConfig: FindOptions = {}

      if (auth_type === AuthType.default) {
        userFindConfig.where = { login }
      } else {
        userFindConfig.include = [
          {
            model: Profile,
            where: { iin: profile.iin }
          }
        ]
      }

      const findedUser = await this.usersRepository.findOne(userFindConfig)

      if (findedUser) {
        throw new ConflictException('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }

      const { id: role_id } = await this.rolesRepository.findOne({
        where: { name: role }
      })

      if (!role_id) {
        throw new BadRequestException('–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      const user = await this.usersRepository.create(
        {
          login,
          password_hash: password,
          role_id,
          telegram_id,
          auth_type,
          visitor_type_id: visitor_type
        },
        {
          transaction
        }
      )

      if (!user) {
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      const userProfile = await user.$create('profile', profile, {
        transaction
      })

      if (!userProfile) {
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      await user.$add('centers', center_id, { transaction })

      if (role == RoleType.manager) {
        await this.managerTableRepository.create(
          {
            manager_id: user.id,
            center_id,
            table: table,
            cabinet: cabinet
          },
          { transaction }
        )

        if (service_ids) {
          await user.$add('services', service_ids, { transaction })
        }

        if (table) {
          await this.managerTableRepository.create(
            {
              manager_id: user.id,
              center_id,
              table
            },
            { transaction }
          )
        }
      }

      await transaction.commit()

      return {
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        statusCode: 201
      }
    } catch (error) {
      await transaction.rollback()

      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: ' + error)

      if (error instanceof HttpException) {
        throw error
      }

      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }
  }
}
