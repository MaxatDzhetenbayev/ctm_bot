import {
  BadRequestException,
  ConflictException,
  HttpException,
  Injectable,
  InternalServerErrorException,
  Logger,
  NotFoundException
} from '@nestjs/common'
import { InjectModel } from '@nestjs/sequelize'
import { Op } from 'sequelize'
import { Sequelize } from 'sequelize-typescript'
import { Center } from '../centers/entities/center.entity'
import { CreateUserByTelegramDto } from './dto/create-user-by-telegram.dto'
import { CreateUserDto } from './dto/create-user.dto'
import { ManagerTable } from './entities/manager-table.entity'
import { Profile } from './entities/profile.entity'
import { Role } from './entities/role.entity'
import { AuthType, User } from './entities/user.entity'

@Injectable()
export class UsersService {
  constructor(
    @InjectModel(User)
    private readonly usersRepository: typeof User,
    @InjectModel(Profile)
    private readonly profilesRepository: typeof Profile,
    @InjectModel(ManagerTable)
    private readonly managerTableRepository: typeof ManagerTable,
    private readonly sequelize: Sequelize
  ) {}

  private readonly logger = new Logger(this.usersRepository.name)

  async createUser(dto: CreateUserDto) {
    const transaction = await this.sequelize.transaction()

    if ((dto.role === 1)) {
      throw new BadRequestException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏')
    }

    try {
      const { login, password, role, profile, center_id, service_ids } = dto

      const findUserInCenter = await this.usersRepository.findOne({
        where: {
          login
        },
        include: [
          {
            model: Center,
            where: {
              id: center_id
            },
            attributes: [],
            through: { attributes: [] }
          }
        ]
      })

      if (findUserInCenter) {
        throw new ConflictException(
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ'
        )
      }

      const user = await this.usersRepository.create(
        {
          login,
          password_hash: password,
          role_id: role,
          auth_type: AuthType.default
        },
        {
          transaction
        }
      )

      if (!user) {
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      const userProfile = await user.$create('profile', profile, {
        transaction
      })

      if (!userProfile) {
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      await user.$add('centers', center_id, { transaction })

      if (service_ids) {
        await user.$add('services', service_ids, { transaction })
      }

      await transaction.commit()

      const { password_hash, ...user_data } = user.toJSON()

      return user_data
    } catch (error) {
      await transaction.rollback()

      if (error instanceof HttpException) {
        throw error
      }

      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }
  }

  async getManager(managerId: number) {
    try {
      const manager = await this.usersRepository.findOne({
        where: {
          id: managerId
        },
        include: [
          {
            model: Role,
            where: { name: 'manager' },
            attributes: ['name']
          },
          {
            model: Profile,
            attributes: ['full_name', 'iin', 'phone']
          }
        ]
      })

      if (!manager) {
        throw new NotFoundException('–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      if (manager.role.name !== 'manager') {
        throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
      }

      return manager
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }

      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
    }
  }

  async getProfileUser({ login }: { login: string }) {
    try {
      const user = await this.validateUserByLogin(login)
      if (!user) {
        throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const profile = await this.profilesRepository.findOne({
        where: {
          id: user.id
        }
      })

      if (!profile) {
        throw new NotFoundException('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }

      const { login: userLogin, role } = user
      const { full_name } = profile

      return {
        userLogin,
        role: role.name,
        full_name
      }
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }

      throw new InternalServerErrorException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      )
    }
  }

  async validateUserByLogin(login: string) {
    const user = await this.usersRepository.findOne({
      where: {
        login: login
      },
      include: [
        {
          model: Role,
          attributes: ['name']
        },
        {
          model: Center,
          through: { attributes: [] }
        }
      ],
      plain: true
    })

    return user
  }

  async createUserByTelegram(dto: CreateUserByTelegramDto) {
    this.logger.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    try {
      const transaction = await this.sequelize.transaction()

      const { role, full_name, iin, phone, ...userData } = dto

      const user = await this.usersRepository.create(userData, {
        transaction
      })

      if (!user) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      const profile = await this.profilesRepository.create(
        {
          id: user.id,
          iin,
          full_name,
          phone
        },
        { transaction }
      )

      if (!profile) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      await user.$set('role', role, { transaction })

      await transaction.commit()

      const result = {
        user: user.toJSON(),
        profile: profile.toJSON()
      }

      return result
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: ' + error)
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }
  }

  async validateUserByTelegram(telegram_id: string) {
    this.logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    const user = await this.usersRepository.findOne({
      where: {
        telegram_id
      }
    })

    return user
  }

  async getManagersByCenter(center_id: number) {
    try {
      const managers = await this.managerTableRepository.findAll({
        where: { center_id },
        attributes: ['manager_id']
      })

      if (!managers.length) {
        throw new NotFoundException('–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      }

      const managerIds = managers.map(manager => manager.manager_id)

      const profiles = await this.profilesRepository.findAll({
        where: { id: managerIds },
        attributes: ['id', 'full_name', 'iin', 'phone']
      })

      if (!profiles.length) {
        return []
      }

      return profiles
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤')
    }
  }

  async getEmployeeByFullName(full_name: string, user: User) {
    function capitalizeFullName(name: string): string {
      return name
        .toLowerCase()
        .trim()
        .split(' ')
        .filter(word => word.length > 0)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ')
    }

    try {
      const userWithCenters = await this.usersRepository.findOne({
        where: { id: user.id },
        include: [{ model: Center, through: { attributes: [] } }]
      })

      if (!userWithCenters || !userWithCenters.centers.length) {
        throw new BadRequestException('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω —Ü–µ–Ω—Ç—Ä')
      }

      console.log('üìå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ü–µ–Ω—Ç—Ä—ã:', userWithCenters.centers)

      const centerId = userWithCenters.centers[0].id
      console.log('üìå –ü–æ–∏—Å–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ:', centerId)

      const decodedFullName = decodeURIComponent(full_name).trim()
      console.log('üîç –ò—â—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –§–ò–û:', decodedFullName)

      const formattedFullName = capitalizeFullName(decodedFullName)
      console.log('üîç –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –§–ò–û:', formattedFullName)

      const profiles = await this.profilesRepository.findAll({
        where: {
          full_name: { [Op.iLike]: `%${formattedFullName}%` }
        },
        include: [
          {
            model: User,
            include: [
              {
                model: Center,
                through: { attributes: [] },
                where: { id: centerId }
              }
            ]
          }
        ],
        attributes: ['id', 'full_name', 'iin', 'phone']
      })

      console.log('üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ:', profiles)

      if (!profiles.length) {
        throw new NotFoundException(
          '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —Ü–µ–Ω—Ç—Ä–µ'
        )
      }

      const managerIds = profiles.map(profile => profile.id)
      const managerEntries = await this.managerTableRepository.findAll({
        where: { manager_id: managerIds }
      })

      console.log('üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ:', managerEntries)

      if (!managerEntries.length) {
        throw new NotFoundException(
          '–≠—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ –¥–∞–Ω–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ'
        )
      }

      const managerProfiles = profiles.filter(profile =>
        managerEntries.some(manager => manager.manager_id === profile.id)
      )

      console.log('üìå –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', managerProfiles)

      return managerProfiles.map(profile => ({
        id: profile.id,
        full_name: profile.full_name,
        iin: profile.iin,
        phone: profile.phone
      }))
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞')
    }
  }

  async updateEmployeeById(
    employeeId: number,
    updateData: { full_name?: string; iin?: string; phone?: string },
    user: User
  ) {
    try {
      const userWithCenters = await this.usersRepository.findOne({
        where: { id: user.id },
        include: [{ model: Center, through: { attributes: [] } }]
      })

      if (!userWithCenters || !userWithCenters.centers.length) {
        throw new BadRequestException('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞')
      }

      console.log('üìå –¶–µ–Ω—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userWithCenters.centers)

      const centerId = userWithCenters.centers[0].id
      console.log('üìå –†–∞–±–æ—Ç–∞–µ–º —Å —Ü–µ–Ω—Ç—Ä–æ–º:', centerId)

      const profile = await this.profilesRepository.findOne({
        where: { id: employeeId },
        include: [
          {
            model: User,
            include: [
              {
                model: Center,
                through: { attributes: [] },
                where: { id: centerId }
              }
            ]
          }
        ]
      })

      if (!profile) {
        throw new NotFoundException(
          '–†–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–º—É —Ü–µ–Ω—Ç—Ä—É'
        )
      }

      console.log('üìå –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫:', profile)

      await profile.update({
        full_name: updateData.full_name ?? profile.full_name,
        iin: updateData.iin ?? profile.iin,
        phone: updateData.phone ?? profile.phone
      })

      console.log('üìå –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', profile)

      return profile
    } catch (error) {
      if (error instanceof HttpException) {
        throw error
      }
      throw new InternalServerErrorException(
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ'
      )
    }
  }

  async createManager(dto: CreateUserDto, user: User) {
    const transaction = await this.sequelize.transaction()

    try {
      let centerId = dto.center_id
      if (!centerId) {
        const userWithCenters = await this.usersRepository.findOne({
          where: { id: user.id },
          include: [{ model: Center, through: { attributes: [] } }]
        })

        if (!userWithCenters || !userWithCenters.centers.length) {
          throw new BadRequestException(
            '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞, –∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ'
          )
        }

        centerId = userWithCenters.centers[0].id
      }

      console.log('üìå –¶–µ–Ω—Ç—Ä –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:', centerId)

      const findUserInCenter = await this.usersRepository.findOne({
        where: { login: dto.login },
        include: [
          {
            model: Center,
            where: { id: centerId },
            attributes: [],
            through: { attributes: [] }
          }
        ]
      })

      if (findUserInCenter) {
        throw new ConflictException(
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ'
        )
      }

      const newUser = await this.usersRepository.create(
        {
          login: dto.login,
          password_hash: dto.password,
          role_id: dto.role ?? 2,
          auth_type: AuthType.default
        },
        { transaction }
      )

      if (!newUser) {
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      console.log('üìå –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', newUser)

      const userProfile = await newUser.$create('profile', dto.profile, {
        transaction
      })

      await this.managerTableRepository.create(
        {
          manager_id: newUser.id,
          center_id: centerId,
          table: dto.table
        },
        { transaction }
      )

      if (!userProfile) {
        throw new InternalServerErrorException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        )
      }

      console.log('üìå –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:', userProfile)

      await newUser.$add('centers', centerId, { transaction })

      if (dto.service_ids) {
        await newUser.$add('services', dto.service_ids, { transaction })
      }

      await transaction.commit()

      const { password_hash, ...user_data } = newUser.toJSON()
      return user_data
    } catch (error) {
      await transaction.rollback()
      if (error instanceof HttpException) {
        throw error
      }
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞')
    }
  }
}
